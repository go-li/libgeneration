package fenwick
func bLSI(i int)(int){
return ((i) & -(i))
}


/* Sum: Return the sum of the first i elements, 0 through i-1. */
func Sum[T](a []T, i int, add func(*T, *T, *T))(*T){
var temporary = make([]T,1) 
var sum = &temporary[0] 
for ;(i != 0);i -= bLSI(i) {
add(sum,sum,&a[i - 1])
}
return sum
}


/* Add: Add delta to element i (and thus sum(a, j) for all j > i). */
func Add[T](a []T, i int, delta *T, add func(*T, *T, *T)){
for ;(int(i) < len(a));i += bLSI(i + 1) {
add(&a[i],&a[i],delta)
}
}


/* Optimize by avoiding terms that the two sums have in common
 * (more effective when range is small).
 */
func Range[T](a []T, i, j int, add func(*T, *T, *T), neg func(*T)(*T))(*T){
var temporary = make([]T,1) 
var sum = &temporary[0] 
for ;(j > i);j -= bLSI(j) {
add(sum,sum,&a[j - 1])
}
for ;(i > j);i -= bLSI(i) {
var n = neg(&a[i - 1]) 
add(sum,sum,n)
neg(&a[i - 1])
}
return sum
}


/* Get: Returns the value of the element at index i. */
func Get[T](a []T, i int, add func(*T, *T, *T), neg func(*T)(*T))(*T){
return Range[T](a,i,i + 1,add,neg)
}


/* Set: Sets the value of the element at index i. */
func Set[T](a []T, value *T, i int, add func(*T, *T, *T), neg func(*T)(*T)){
var temporary = make([]T,1) 
var sum = &temporary[0] 
add(sum,value,neg(Get[T](a,i,add,neg)))
Add[T](a,i,sum,add)
}

func Init[T](a []T, add func(*T, *T, *T)){
var i, j int 
for i = 0 ;(int(i) < len(a));i++{
j = i + bLSI(i + 1) 
if (int(j) < len(a)){
add(&a[j],&a[j],&a[i])
}
}
}

