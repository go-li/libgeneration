package graph
import "math"
type Graph interface{
New (*T)(*T)
Get (int, int, *T)(float64, int)
Set (int, int, float64, *T)
Modify (*T)
Each (*T, func(int))
Transpose (*T)
}

func Dist(d float64, n int)(float64){
return d
}

func Next(d float64, n int)(int){
return n
}

func IsEdge(dist float64)(bool){
return !math.IsNaN(dist) && !math.IsInf(dist,0)
}

func HasEdge(d float64, _ int)(bool){
return IsEdge(d)
}

func ForeachEdge[T](g Graph, graph_data *T, callback func(int, int, float64)){
g.Each(graph_data,func(i int){
const intmin = -int(^uint(0) >> 1) - 1 
var j = 0 
var j2 = 0 
var d float64 
for {
d, j2 = g.Get(i,j,graph_data) 
if (!IsEdge(d)){
j = j2 
if (j2 < 0){
break
}
continue
}
callback(i,j,d)
if (j2 < 0){
break
}
j = j2 
}
})
}

func ForeachEdgeFrom[T](i int, g Graph, graph_data *T, callback func(int, int, float64)){
const intmin = -int(^uint(0) >> 1) - 1 
var j = 0 
var j2 = 0 
var d float64 
for {
d, j2 = g.Get(i,j,graph_data) 
if (!IsEdge(d)){
j = j2 
if (j2 < 0){
break
}
continue
}
callback(i,j,d)
if (j2 < 0){
break
}
j = j2 
}
}

