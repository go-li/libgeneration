package avl
func linker[T](links *[3]*T, _ *byte)(*[3]*T){
return links
}

func balancer[T](_ *[3]*T, balance *byte)(*byte){
return balance
}

func Append[T](tree func(*T)(*[3]*T, *byte), root **T, key *T, cmp func(*T, *T)(int))(*T){
var y *T 
var p *T 
var q *T 
var n *T 
var w *T 
var dir int 
y = *root 
q = nil 
for p = *root ;(p != nil);{
var compare int = cmp(key,p) 
if (compare == 0){
return p
}
if (compare > 0){
dir = 1 
} else
{
dir = 0 
}
if (*balancer[T](tree(p)) != 0){
y = p 
}
q = p 
p = linker[T](tree(p))[dir] 
}
n = key 
linker[T](tree(n))[0] = nil 
linker[T](tree(n))[1] = nil 
linker[T](tree(n))[2] = q 
if (q != nil){
linker[T](tree(q))[dir] = n 
} else
{
*root = n 
}
*balancer[T](tree(n)) = 0 
if (*root == n){
return n
}
for p = n ;(p != y);p = q {
q = linker[T](tree(p))[2] 
if (linker[T](tree(q))[0] != p){
dir = 1 
} else
{
dir = 0 
}
if (dir == 0){
*balancer[T](tree(q))--
} else
{
*balancer[T](tree(q))++
}
}
if (*balancer[T](tree(y)) == 254){
var x *T 
x = linker[T](tree(y))[0] 
if (*balancer[T](tree(x)) == 255){
w = x 
linker[T](tree(y))[0] = linker[T](tree(x))[1] 
linker[T](tree(x))[1] = y 
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
linker[T](tree(x))[2] = linker[T](tree(y))[2] 
linker[T](tree(y))[2] = x 
if (linker[T](tree(y))[0] != nil){
linker[T](tree(linker[T](tree(y))[0]))[2] = y 
}
} else
{
if (!(*balancer[T](tree(x)) == +1)){
panic("assert")
}
w = linker[T](tree(x))[1] 
linker[T](tree(x))[1] = linker[T](tree(w))[0] 
linker[T](tree(w))[0] = x 
linker[T](tree(y))[0] = linker[T](tree(w))[1] 
linker[T](tree(w))[1] = y 
if (*balancer[T](tree(w)) == 255){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = +1 
} else
if (*balancer[T](tree(w)) == 0){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
} else
{
*balancer[T](tree(x)) = 255 
*balancer[T](tree(y)) = 0 
}
*balancer[T](tree(w)) = 0 
linker[T](tree(w))[2] = linker[T](tree(y))[2] 
linker[T](tree(x))[2] = w 
linker[T](tree(y))[2] = w 
if (linker[T](tree(x))[1] != nil){
linker[T](tree(linker[T](tree(x))[1]))[2] = x 
}
if (linker[T](tree(y))[0] != nil){
linker[T](tree(linker[T](tree(y))[0]))[2] = y 
}
}
} else
if (*balancer[T](tree(y)) == +2){
var x *T 
x = linker[T](tree(y))[1] 
if (*balancer[T](tree(x)) == +1){
w = x 
linker[T](tree(y))[1] = linker[T](tree(x))[0] 
linker[T](tree(x))[0] = y 
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
linker[T](tree(x))[2] = linker[T](tree(y))[2] 
linker[T](tree(y))[2] = x 
if (linker[T](tree(y))[1] != nil){
linker[T](tree(linker[T](tree(y))[1]))[2] = y 
}
} else
{
if (!(*balancer[T](tree(x)) == 255)){
panic("assert")
}
w = linker[T](tree(x))[0] 
linker[T](tree(x))[0] = linker[T](tree(w))[1] 
linker[T](tree(w))[1] = x 
linker[T](tree(y))[1] = linker[T](tree(w))[0] 
linker[T](tree(w))[0] = y 
if (*balancer[T](tree(w)) == +1){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 255 
} else
if (*balancer[T](tree(w)) == 0){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
} else
{
*balancer[T](tree(x)) = +1 
*balancer[T](tree(y)) = 0 
}
*balancer[T](tree(w)) = 0 
linker[T](tree(w))[2] = linker[T](tree(y))[2] 
linker[T](tree(x))[2] = w 
linker[T](tree(y))[2] = w 
if (linker[T](tree(x))[0] != nil){
linker[T](tree(linker[T](tree(x))[0]))[2] = x 
}
if (linker[T](tree(y))[1] != nil){
linker[T](tree(linker[T](tree(y))[1]))[2] = y 
}
}
} else
{
return n
}
if (linker[T](tree(w))[2] != nil){
var oo = 0 
if (y != linker[T](tree(linker[T](tree(w))[2]))[0]){
oo = 1 
}
linker[T](tree(linker[T](tree(w))[2]))[oo] = w 
} else
{
*root = w 
}
return n
}
/* |balancer(tree(w))[31] == +1| */
/* |balancer(tree(w)) == 255| */

/* Deletes from |tree| and returns an item matching |item|.
   Returns a null pointer if no matching item found. */
func Delete[T](tree func(*T)(*[3]*T, *byte), root **T, key *T, cmp func(*T, *T)(int))(result *T){
var p *T 
var q *T 
var dir int 
if (!(tree != nil)){
panic("assert")
}
if (*root == nil){
return nil
}
p = *root 
for {
var compare int = cmp(key,p) 
if (compare == 0){
break
}
if (compare > 0){
dir = 1 
} else
{
dir = 0 
}
p = linker[T](tree(p))[dir] 
if (p == nil){
return nil
}
}
result = p 
q = linker[T](tree(p))[2] 
if (q == nil){
q = *root 
dir = 0 
}
if (linker[T](tree(p))[1] == nil){
linker[T](tree(q))[dir] = linker[T](tree(p))[0] 
if (linker[T](tree(q))[dir] != nil){
linker[T](tree(linker[T](tree(q))[dir]))[2] = linker[T](tree(p))[2] 
}
} else
{
var r *T 
r = linker[T](tree(p))[1] 
if (linker[T](tree(r))[0] == nil){
linker[T](tree(r))[0] = linker[T](tree(p))[0] 
linker[T](tree(q))[dir] = r 
linker[T](tree(r))[2] = linker[T](tree(p))[2] 
if (linker[T](tree(r))[0] != nil){
linker[T](tree(linker[T](tree(r))[0]))[2] = r 
}
*balancer[T](tree(r)) = *balancer[T](tree(p)) 
q = r 
dir = 1 
} else
{
var s *T 
s = linker[T](tree(r))[0] 
for (linker[T](tree(s))[0] != nil){
s = linker[T](tree(s))[0] 
}
r = linker[T](tree(s))[2] 
linker[T](tree(r))[0] = linker[T](tree(s))[1] 
linker[T](tree(s))[0] = linker[T](tree(p))[0] 
linker[T](tree(s))[1] = linker[T](tree(p))[1] 
linker[T](tree(q))[dir] = s 
if (linker[T](tree(s))[0] != nil){
linker[T](tree(linker[T](tree(s))[0]))[2] = s 
}
linker[T](tree(linker[T](tree(s))[1]))[2] = s 
linker[T](tree(s))[2] = linker[T](tree(p))[2] 
if (linker[T](tree(r))[0] != nil){
linker[T](tree(linker[T](tree(r))[0]))[2] = r 
}
*balancer[T](tree(s)) = *balancer[T](tree(p)) 
q = r 
dir = 0 
}
}
if (p == *root && p != nil){
if (linker[T](tree(p))[0] == nil){
if (q == *root){
q = linker[T](tree(p))[1] 
}
*root = linker[T](tree(p))[1] 
} else
{
if (q == *root){
q = linker[T](tree(p))[0] 
}
*root = linker[T](tree(p))[0] 
}
}
linker[T](tree(p))[0] = nil 
linker[T](tree(p))[1] = nil 
linker[T](tree(p))[2] = nil 
*balancer[T](tree(p)) = 0 
for (q != *root){
var y *T 
y = q 
if (linker[T](tree(y))[2] != nil){
q = linker[T](tree(y))[2] 
} else
{
q = *root 
}
if (dir == 0){
if (linker[T](tree(q))[0] != y){
dir = 1 
} else
{
dir = 0 
}
*balancer[T](tree(y))++
if (*balancer[T](tree(y)) == +1){
break
} else
if (*balancer[T](tree(y)) == +2){
var x *T 
x = linker[T](tree(y))[1] 
if (*balancer[T](tree(x)) == 255){
var w *T 
if (!(*balancer[T](tree(x)) == 255)){
panic("assert")
}
w = linker[T](tree(x))[0] 
linker[T](tree(x))[0] = linker[T](tree(w))[1] 
linker[T](tree(w))[1] = x 
linker[T](tree(y))[1] = linker[T](tree(w))[0] 
linker[T](tree(w))[0] = y 
if (*balancer[T](tree(w)) == +1){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 255 
} else
if (*balancer[T](tree(w)) == 0){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
} else
{
*balancer[T](tree(x)) = +1 
*balancer[T](tree(y)) = 0 
}
*balancer[T](tree(w)) = 0 
linker[T](tree(w))[2] = linker[T](tree(y))[2] 
linker[T](tree(x))[2] = w 
linker[T](tree(y))[2] = w 
if (linker[T](tree(x))[0] != nil){
linker[T](tree(linker[T](tree(x))[0]))[2] = x 
}
if (linker[T](tree(y))[1] != nil){
linker[T](tree(linker[T](tree(y))[1]))[2] = y 
}
linker[T](tree(q))[dir] = w 
} else
{
linker[T](tree(y))[1] = linker[T](tree(x))[0] 
linker[T](tree(x))[0] = y 
linker[T](tree(x))[2] = linker[T](tree(y))[2] 
linker[T](tree(y))[2] = x 
if (linker[T](tree(y))[1] != nil){
linker[T](tree(linker[T](tree(y))[1]))[2] = y 
}
linker[T](tree(q))[dir] = x 
if (*balancer[T](tree(x)) == 0){
*balancer[T](tree(x)) = 255 
*balancer[T](tree(y)) = +1 
break
} else
{
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
y = x 
}
}
}
} else
{
if (linker[T](tree(q))[0] != y){
dir = 1 
} else
{
dir = 0 
}
*balancer[T](tree(y))--
if (*balancer[T](tree(y)) == 255){
break
} else
if (*balancer[T](tree(y)) == 254){
var x *T 
x = linker[T](tree(y))[0] 
if (*balancer[T](tree(x)) == +1){
var w *T 
if (!(*balancer[T](tree(x)) == +1)){
panic("assert")
}
w = linker[T](tree(x))[1] 
linker[T](tree(x))[1] = linker[T](tree(w))[0] 
linker[T](tree(w))[0] = x 
linker[T](tree(y))[0] = linker[T](tree(w))[1] 
linker[T](tree(w))[1] = y 
if (*balancer[T](tree(w)) == 255){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = +1 
} else
if (*balancer[T](tree(w)) == 0){
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
} else
{
*balancer[T](tree(x)) = 255 
*balancer[T](tree(y)) = 0 
}
*balancer[T](tree(w)) = 0 
linker[T](tree(w))[2] = linker[T](tree(y))[2] 
linker[T](tree(x))[2] = w 
linker[T](tree(y))[2] = w 
if (linker[T](tree(x))[1] != nil){
linker[T](tree(linker[T](tree(x))[1]))[2] = x 
}
if (linker[T](tree(y))[0] != nil){
linker[T](tree(linker[T](tree(y))[0]))[2] = y 
}
linker[T](tree(q))[dir] = w 
} else
{
linker[T](tree(y))[0] = linker[T](tree(x))[1] 
linker[T](tree(x))[1] = y 
linker[T](tree(x))[2] = linker[T](tree(y))[2] 
linker[T](tree(y))[2] = x 
if (linker[T](tree(y))[0] != nil){
linker[T](tree(linker[T](tree(y))[0]))[2] = y 
}
linker[T](tree(q))[dir] = x 
if (*balancer[T](tree(x)) == 0){
*balancer[T](tree(x)) = +1 
*balancer[T](tree(y)) = 255 
break
} else
{
*balancer[T](tree(x)) = 0 
*balancer[T](tree(y)) = 0 
y = x 
}
}
}
}
}
return result
}


//  tree.pavl_alloc.libavl_free (tree.pavl_alloc, p);/* |balancer(tree(w)) == 255| */
/* |balancer(tree(w)) == +1| */
func Foreach[T](tree func(*T)(*[3]*T, *byte), root *T, apply func(*T)(bool))(bool){
var paths, _ = tree(root) 
if ((paths[0] != nil) && !Foreach[T](tree,paths[0],apply)){
return false
}
if (!apply(root)){
return false
}
if ((paths[1] != nil) && !Foreach[T](tree,paths[1],apply)){
return false
}
return true
}

func Find[T](tree func(*T)(*[3]*T, *byte), root *T, find func(*T)(byte))(f *T){
f = root 
for {
var children, _ = tree(f) 
var dir byte 
if (find != nil){
dir = find(f) 
if (dir > 3){
if (dir >= 7){
return nil
}
if (dir == 6){
return f
}
return (*children)[dir - 3]
}
}
if ((*children)[dir] == nil){
return f
}
f = (*children)[dir] 
}
}

func InOrderSuccessor[T](tree func(*T)(*[3]*T, *byte), n *T)(*T){
if ((linker[T](tree(n))[1] != nil)){
return Find[T](tree,linker[T](tree(n))[1],nil)
}
var p *T 
p = linker[T](tree(n))[2] 
for (p != nil && n == linker[T](tree(p))[1]){
n = p 
p = linker[T](tree(p))[2] 
}
return p
}

