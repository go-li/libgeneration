package quick
var Seed uint32 = 1701105312 
var Cutoff int = 20 
func sort[T](a []T, tmp *T, cmp func(*T, *T)(int)){
for i := 1 ;(i < len(a));i++{
var p = &a[i] 
*tmp = *p 
j := i - 1 
for ;(j >= 0 && cmp(&a[j],tmp) > 0);j--{
var q = &a[j + 1] 
var r = &a[j] 
*q = *r 
}
p = &a[j + 1] 
*p = *tmp 
}
}

func qsort[T](a []T, tmp *T, cmp func(*T, *T)(int)){
for {
if (len(a) < 2){
return 
}
if (len(a) < Cutoff){
sort[T](a,tmp,cmp)
return 
}
left, right := 0, len(a) - 1 
var random = uint64(uint32(uint64(Seed) * uint64(len(a)))) 
pivotIndex := int((random * uint64(len(a))) >> 32) 
var p *T 
var q *T 
p = &a[pivotIndex] 
q = &a[right] 
*tmp = *p 
*p = *q 
*q = *tmp 
for i := range (a) {
if (cmp(&a[i],&a[right]) < 0){
p = &a[i] 
q = &a[left] 
*tmp = *p 
*p = *q 
*q = *tmp 
left++
}
}
p = &a[right] 
q = &a[left] 
*tmp = *p 
*p = *q 
*q = *tmp 
qsort[T](a[0:left],tmp,cmp)
a = a[left + 1:] 
}
}

func Sort[T](a []T, cmp func(*T, *T)(int)){
var temp *T 
if (len(a) >= cap(a)){
var buf []T 
buf = make([]T,1) 
temp = &buf[0] 
} else
{
temp = &(a[0:cap(a)])[len(a)] 
}
qsort[T](a,temp,cmp)
}

